
import requests
import pandas as pd
import streamlit as st
import datetime
import plotly.express as px

# Clave API de AEMET proporcionada por el usuario
API_KEY = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJnb256YWxvLm1hcnRpbmV6QHNmcGF1bGEuY29tIiwianRpIjoiOTExMmVlNDEtNzI1Yy00NWI1LTg3NjctNzk3YmRlYTZmNjlkIiwiaXNzIjoiQUVNRVQiLCJpYXQiOjE3NTk1ODQxMjQsInVzZXJJZCI6IjkxMTJlZTQxLTcyNWMtNDViNS04NzY3LTc5N2JkZWE2ZjY5ZCIsInJvbGUiOiIifQ.iUjANKo6s5zpgEztajUPzDNYwFERvsi-BZU52grEAMA"

# Coordenadas de la Plaza de la Encarnaci√≥n en Sevilla
LATITUD = 37.3937
LONGITUD = -5.9901

# Encabezado educativo
st.title("Uso de los sat√©lites de la NASA y datos de AEMET para automatizar un huerto escolar")
st.markdown("""
Esta aplicaci√≥n educativa utiliza datos meteorol√≥gicos reales obtenidos por sat√©lites de la NASA y estaciones de AEMET para controlar autom√°ticamente un huerto escolar, optimizando el uso de agua, luz y temperatura para alimentar a 10 personas.

**Datos utilizados:** NASA POWER y AEMET  
**Controles autom√°ticos:** riego, ventilaci√≥n, sombra, seguimiento solar  
**Objetivo:** sostenibilidad, autosuficiencia, educaci√≥n
""")

# Funci√≥n para obtener estaciones de observaci√≥n convencionales
def obtener_estaciones():
    url = "https://opendata.aemet.es/opendata/api/observacion/convencional/todas"
    headers = {"accept": "application/json", "api_key": API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        datos_url = response.json()["datos"]
        estaciones = requests.get(datos_url).json()
        return estaciones
    else:
        st.error("No se pudo obtener estaciones de AEMET.")
        return []

# Filtrar estaciones cercanas a Sevilla
def filtrar_estaciones_cercanas(estaciones, latitud, longitud, radio_km=50):
    cercanas = []
    for est in estaciones:
        try:
            lat = float(est["latitud"])
            lon = float(est["longitud"])
            distancia = ((lat - latitud)**2 + (lon - longitud)**2)**0.5 * 111  # Aproximaci√≥n en km
            if distancia <= radio_km:
                cercanas.append(est)
        except:
            continue
    return cercanas

# Obtener observaciones de una estaci√≥n
def obtener_observaciones(estacion_id):
    url = f"https://opendata.aemet.es/opendata/api/observacion/convencional/datos/estacion/{estacion_id}"
    headers = {"accept": "application/json", "api_key": API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        datos_url = response.json()["datos"]
        observaciones = requests.get(datos_url).json()
        return observaciones
    else:
        st.error("No se pudo obtener observaciones de AEMET.")
        return []

# Obtener estaciones y filtrar por cercan√≠a
estaciones = obtener_estaciones()
estaciones_cercanas = filtrar_estaciones_cercanas(estaciones, LATITUD, LONGITUD)

# Mostrar observaciones de la primera estaci√≥n cercana
if estaciones_cercanas:
    estacion = estaciones_cercanas[0]
    st.subheader(f"Estaci√≥n meteorol√≥gica cercana: {estacion['nombre']} ({estacion['indicativo']})")
    observaciones = obtener_observaciones(estacion["indicativo"])
    if observaciones:
        df = pd.DataFrame(observaciones)
        df["fint"] = pd.to_datetime(df["fint"])
        df = df.sort_values("fint")

        # Mostrar gr√°ficos
        variables = {
            "ta": "Temperatura (¬∞C)",
            "hr": "Humedad relativa (%)",
            "pres": "Presi√≥n (hPa)",
            "vv": "Velocidad del viento (m/s)",
            "prec": "Precipitaci√≥n (mm)"
        }

        for var, label in variables.items():
            if var in df.columns:
                fig = px.line(df, x="fint", y=var, title=label, labels={"fint": "Fecha", var: label})
                st.plotly_chart(fig)

        # Alertas clim√°ticas
        if "ta" in df.columns and df["ta"].max() > 35:
            st.warning("‚ö†Ô∏è Alerta: La temperatura ha superado los 35¬∞C. Activar ventiladores o sombra.")

        if "prec" in df.columns and df["prec"].sum() == 0:
            st.info("üåßÔ∏è No se espera lluvia. Activar riego si la tierra est√° seca.")

        # Simulaci√≥n de radiaci√≥n solar alta
        radiacion_simulada = 850  # W/m¬≤
        if radiacion_simulada > 800:
            st.warning("‚òÄÔ∏è Alta radiaci√≥n solar detectada. Ajustar paneles solares para generar sombra (seguimiento solar con Arduino).")

else:
    st.error("No se encontraron estaciones cercanas a Sevilla.")

# Dise√±o conceptual del huerto
st.subheader("Fuentes de agua sostenibles")
st.markdown("""
- üíß **Algas**: extracci√≥n de humedad  
- üåßÔ∏è **Contenedores de lluvia**  
- üå´Ô∏è **Condensaci√≥n del aire**: combinaci√≥n de ox√≠geno (O‚ÇÇ) con hidr√≥geno (H‚ÇÇ)
""")

# Automatizaci√≥n del huerto escolar
st.subheader("Automatizaci√≥n del huerto escolar")
st.markdown("""
- üå± Sensores de humedad del suelo  
- üí® Ventiladores y calefactores  
- üå≥ Servomotores para sombra  
- üöø Sistema de riego inteligente  
""")
